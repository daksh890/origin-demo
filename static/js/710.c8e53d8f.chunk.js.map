{"version":3,"file":"static/js/710.c8e53d8f.chunk.js","mappings":"2NAqCA,MAlCA,SAAeA,GAA0C,IAAvCC,EAAWD,EAAXC,YAAaC,EAAIF,EAAJE,KAAMC,EAAeH,EAAfG,gBAC/BC,EAAUH,EAAYI,KAAI,SAACC,EAAMC,GAAC,MAAM,CAAEC,MAAOF,EAAMG,MAAOH,EAAM,IA0BxE,OACEI,EAAAA,EAAAA,KAAA,OAAAC,UACED,EAAAA,EAAAA,KAACE,EAAAA,GAAM,CAACR,QAASA,EAASS,SA1BT,SAACC,GAEpB,IAAIC,EAAiBD,EAAST,KAAI,SAACC,EAAMU,GAAG,OAAKV,EAAKE,KAAK,IAE3D,GAA8B,IAA1BO,EAAeE,OAMnB,IAFA,IAAIC,EAAe,GAAGC,EAAA,SAAAZ,GAGpB,IAAMa,EAAgBlB,EAAKmB,QAAO,SAACf,GAKjC,OAJWA,EAAKgB,OAAOC,MAAK,SAACd,GAE3B,OAAOA,IAAUM,EAAeR,EAClC,GAEF,IACAW,EAAY,GAAAM,QAAAC,EAAAA,EAAAA,GAAOP,IAAYO,EAAAA,EAAAA,GAAKL,IACpCF,GAAYO,EAAAA,EAAAA,GAAOC,MAAMC,KAAK,IAAIC,KAAGH,EAAAA,EAAAA,GAAKP,MAC1Cf,EAAgBe,EAElB,EAZSX,EAAI,EAAGA,EAAIQ,EAAeE,OAAQV,IAAGY,EAAAZ,QAL5CJ,EAAgBD,EAkBpB,EAGsD2B,SAAO,KAG/D,E,oBCFA,MA7BA,SAAe7B,GAAmD,IAAhDC,EAAWD,EAAXC,YAAa6B,EAAU9B,EAAV8B,WAAYC,EAAU/B,EAAV+B,WAAYC,EAAMhC,EAANgC,OACjD5B,EAAUH,EAAYI,KAAI,SAACC,EAAMC,GAAC,MAAM,CAAEC,MAAOF,EAAMG,MAAOH,EAAM,IACxE2B,QAAQC,IAAI9B,GAEZ,IAAI+B,EAAiBL,EAAWzB,KAAI,SAACC,EAAMC,GAAC,MAAM,CAChDC,MAAOF,EACPG,MAAOH,EACR,IAUD,OACEI,EAAAA,EAAAA,KAAA,OAAAC,UACED,EAAAA,EAAAA,KAACE,EAAAA,GAAM,CACLR,QAASA,EACTS,SAZe,SAACC,GAEpB,IAAIsB,EAAgBtB,EAAST,KAAI,SAACC,EAAMU,GAAG,OAAKV,EAAKE,KAAK,IAC1DuB,EAAWK,EAAeJ,EAG5B,EAOMK,aAAcF,EACdN,SAAO,KAIf,ECwBA,MAjDA,SAAa7B,GAAgE,IAA7DM,EAAIN,EAAJM,KAAML,EAAWD,EAAXC,YAAaqC,EAAUtC,EAAVsC,WAAYC,EAAavC,EAAbuC,cAAeR,EAAU/B,EAAV+B,WACtDS,EAAaF,GAAcA,EAAWG,KAAOnC,EAAKmC,GAExD,OACEC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,OAAMhC,SAAA,EACnBD,EAAAA,EAAAA,KAAA,OAAKiC,UAAU,QAAOhC,UACpBD,EAAAA,EAAAA,KAAA,OAAKkC,IAAKtC,EAAKuC,IAAKC,IAAI,cAExBN,IACAE,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAahC,SAAA,EAC1BD,EAAAA,EAAAA,KAAA,OAAKiC,UAAU,SAAQhC,SACpBL,EAAKgB,OAAOjB,KAAI,SAACI,EAAOO,GACvB,OAAIf,EAAY8C,SAAStC,IAChBC,EAAAA,EAAAA,KAAA,KAAAC,SAAcF,GAANO,IAEVN,EAAAA,EAAAA,KAAAsC,EAAAA,SAAA,GACT,OAEFtC,EAAAA,EAAAA,KAAA,OAAKiC,UAAU,UAAShC,UACtBD,EAAAA,EAAAA,KAAA,OACEiC,UAAU,SACVM,QAAS,WACPV,EAAc,CAAEE,GAAInC,EAAKmC,IAC3B,EAAE9B,UAEFD,EAAAA,EAAAA,KAACwC,EAAAA,IAAM,WAKdV,IACCE,EAAAA,EAAAA,MAAA,OAAKC,UAAU,SAAQhC,SAAA,EACrBD,EAAAA,EAAAA,KAACyC,EAAM,CACLlD,YAAaA,EACb6B,WAAYxB,EAAKgB,OACjBS,WAAYA,EACZC,OAAQ1B,EAAKmC,MAEf/B,EAAAA,EAAAA,KAAA,OAAKiC,UAAU,UAAShC,UACtBD,EAAAA,EAAAA,KAAA,OAAKiC,UAAU,SAASM,QAAS,kBAAMV,EAAc,KAAK,EAAC5B,SAAC,kBAQxE,ECSA,MAvDA,SAAkBX,GAAyB,IAAtBC,EAAWD,EAAXC,YAAamD,EAAIpD,EAAJoD,KAC1BC,GAAWC,EAAAA,EAAAA,MACjBC,GAAwBC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7BrD,EAAIuD,EAAA,GAAEE,EAAOF,EAAA,GACpBG,GAAoCJ,EAAAA,EAAAA,UAAS,MAAKK,GAAAH,EAAAA,EAAAA,GAAAE,EAAA,GAA3CtB,EAAUuB,EAAA,GAAEtB,EAAasB,EAAA,GAChCC,GAAwCN,EAAAA,EAAAA,UAAS,IAAGO,GAAAL,EAAAA,EAAAA,GAAAI,EAAA,GAA7C5C,EAAY6C,EAAA,GAAE5D,EAAe4D,EAAA,IACpCC,EAAAA,EAAAA,YAAU,WAERL,GAAQM,EAAAA,EAAAA,MACR9D,GAAgB8D,EAAAA,EAAAA,MACXb,GACHC,EAAS,IAEb,GAAG,CAACA,EAAUD,IAEd,IAAMrB,EAAa,SAACmC,EAAWC,GAC7B,IAAMC,EAAelE,EAAKG,KAAI,SAACgE,GAC7B,OAAIA,EAAK5B,KAAO0B,GACdG,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAYD,GAAI,IAAE/C,OAAQ4C,IAErBG,CACT,IACAV,EAAQS,GACRjE,EAAgBiE,EAClB,EAEA,OACE1B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,sBAAqBhC,SAAA,EAClC+B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBhC,SAAA,EAC/BD,EAAAA,EAAAA,KAAA,OAAKiC,UAAU,OAAMhC,SAAC,YACtBD,EAAAA,EAAAA,KAAA,OAAKiC,UAAU,OAAMhC,UACnBD,EAAAA,EAAAA,KAAC6D,EAAM,CACLtE,YAAaA,EACbC,KAAMA,EACNC,gBAAiBA,UAIvBO,EAAAA,EAAAA,KAAA,OAAKiC,UAAU,iBAAgBhC,SAC5BO,EAAab,KAAI,SAACC,GAAI,IAAEU,EAAGwD,UAAAvD,OAAA,QAAAwD,IAAAD,UAAA,GAAAA,UAAA,GAAGlE,EAAKmC,GAAE,OACpC/B,EAAAA,EAAAA,KAAA,OAAAC,UACED,EAAAA,EAAAA,KAACgE,EAAI,CAEHpE,KAAMA,EACNL,YAAaA,EACbqC,WAAYA,EACZC,cAAeA,EACfR,WAAYA,GALPf,IAFCA,EASJ,QAKhB,C","sources":["component/Dashboard/Filter/filter.js","component/Dashboard/Card/update/Update.js","component/Dashboard/Card/Card.js","component/Dashboard/dashboard.js"],"sourcesContent":["import React from \"react\";\r\nimport Select from \"react-select\";\r\n\r\nfunction Filter({ adminLabels, data, setFilteredData }) {\r\n  var options = adminLabels.map((item, i) => ({ value: item, label: item }));\r\n\r\n  const handleChange = (selected) => {\r\n    // console.log(selected);\r\n    var filteredLabels = selected.map((item, key) => item.value);\r\n    // console.log(filteredLabels);\r\n    if (filteredLabels.length === 0) {\r\n      setFilteredData(data);\r\n      return;\r\n    }\r\n    var filteredData = [];\r\n\r\n    for (let i = 0; i < filteredLabels.length; i++) {\r\n      const iterationData = data.filter((item) => {\r\n        let tags = item.labels.some((label) => {\r\n          // console.log(filteredLabels[i], label);\r\n          return label === filteredLabels[i];\r\n        });\r\n        return tags;\r\n      });\r\n      filteredData = [...filteredData, ...iterationData];\r\n      filteredData = [...Array.from(new Set([...filteredData]))];\r\n      setFilteredData(filteredData);\r\n      //   console.log(filteredData);\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      <Select options={options} onChange={handleChange} isMulti />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Filter;\r\n","import React from \"react\";\r\nimport Select from \"react-select\";\r\nimport \"./Update.scss\";\r\n\r\nfunction Update({ adminLabels, cardLabels, UpdateCard, CardID }) {\r\n  var options = adminLabels.map((item, i) => ({ value: item, label: item }));\r\n  console.log(options);\r\n\r\n  var defaultOptions = cardLabels.map((item, i) => ({\r\n    value: item,\r\n    label: item,\r\n  }));\r\n\r\n  const handleChange = (selected) => {\r\n    // console.log(selected);\r\n    var updatedLabels = selected.map((item, key) => item.value);\r\n    UpdateCard(updatedLabels, CardID);\r\n\r\n    // console.log(updatedLabels);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Select\r\n        options={options}\r\n        onChange={handleChange}\r\n        defaultValue={defaultOptions}\r\n        isMulti\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Update;\r\n","import React from \"react\";\r\nimport \"./card.scss\";\r\nimport { AiOutlinePlusCircle as Assign } from \"react-icons/ai\";\r\n\r\nimport Update from \"./update/Update\";\r\n\r\nfunction Card({ item, adminLabels, activeCard, setActiveCard, UpdateCard }) {\r\n  const isUpdating = activeCard && activeCard.id === item.id;\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"image\">\r\n        <img src={item.img} alt=\"animal\" />\r\n      </div>\r\n      {!isUpdating && (\r\n        <div className=\"description\">\r\n          <div className=\"labels\">\r\n            {item.labels.map((label, key) => {\r\n              if (adminLabels.includes(label)) {\r\n                return <p key={key}>{label}</p>;\r\n              }\r\n              return <></>;\r\n            })}\r\n          </div>\r\n          <div className=\"buttons\">\r\n            <div\r\n              className=\"button\"\r\n              onClick={() => {\r\n                setActiveCard({ id: item.id });\r\n              }}\r\n            >\r\n              <Assign />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n      {isUpdating && (\r\n        <div className=\"update\">\r\n          <Update\r\n            adminLabels={adminLabels}\r\n            cardLabels={item.labels}\r\n            UpdateCard={UpdateCard}\r\n            CardID={item.id}\r\n          />\r\n          <div className=\"buttons\">\r\n            <div className=\"button\" onClick={() => setActiveCard(null)}>\r\n              Update\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Filter from \"./Filter/filter\";\r\nimport { getData } from \"../Data/data\";\r\nimport Card from \"./Card/Card\";\r\nimport \"./dashboard.scss\";\r\n\r\nfunction Dashboard({ adminLabels, user }) {\r\n  const navigate = useNavigate();\r\n  const [data, setData] = useState([]);\r\n  const [activeCard, setActiveCard] = useState(null);\r\n  const [filteredData, setFilteredData] = useState([]);\r\n  useEffect(() => {\r\n    // console.log(\"once\");\r\n    setData(getData());\r\n    setFilteredData(getData());\r\n    if (!user) {\r\n      navigate(\"/\");\r\n    }\r\n  }, [navigate, user]);\r\n\r\n  const UpdateCard = (newLabels, CardId) => {\r\n    const updatedCards = data.map((card) => {\r\n      if (card.id === CardId) {\r\n        return { ...card, labels: newLabels };\r\n      }\r\n      return card;\r\n    });\r\n    setData(updatedCards);\r\n    setFilteredData(updatedCards);\r\n  };\r\n\r\n  return (\r\n    <div className=\"dashboard-container\">\r\n      <div className=\"dashboard-filter\">\r\n        <div className=\"head\">Filter</div>\r\n        <div className=\"comp\">\r\n          <Filter\r\n            adminLabels={adminLabels}\r\n            data={data}\r\n            setFilteredData={setFilteredData}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"dashboard-main\">\r\n        {filteredData.map((item, key = item.id) => (\r\n          <div key={key}>\r\n            <Card\r\n              key={key}\r\n              item={item}\r\n              adminLabels={adminLabels}\r\n              activeCard={activeCard}\r\n              setActiveCard={setActiveCard}\r\n              UpdateCard={UpdateCard}\r\n            />\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dashboard;\r\n"],"names":["_ref","adminLabels","data","setFilteredData","options","map","item","i","value","label","_jsx","children","Select","onChange","selected","filteredLabels","key","length","filteredData","_loop","iterationData","filter","labels","some","concat","_toConsumableArray","Array","from","Set","isMulti","cardLabels","UpdateCard","CardID","console","log","defaultOptions","updatedLabels","defaultValue","activeCard","setActiveCard","isUpdating","id","_jsxs","className","src","img","alt","includes","_Fragment","onClick","Assign","Update","user","navigate","useNavigate","_useState","useState","_useState2","_slicedToArray","setData","_useState3","_useState4","_useState5","_useState6","useEffect","getData","newLabels","CardId","updatedCards","card","_objectSpread","Filter","arguments","undefined","Card"],"sourceRoot":""}